service: pickyourcourses-telegram-bot

frameworkVersion: "4"

provider:
  name: aws
  runtime: nodejs22.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 768
  timeout: 25
  tracing:
    lambda: true
    apiGateway: true

  # Environment variables
  environment:
    STAGE: ${self:provider.stage}
    TELEGRAM_BOT_TOKEN: ${ssm:/pickyourcourses/${self:provider.stage}/telegram-bot-token}
    DYNAMODB_TABLE_PREFIX: pickyourcourses-${self:provider.stage}
    ADMIN_USER_IDS: ${ssm:/pickyourcourses/${self:provider.stage}/admin-user-ids}
    NODE_ENV: ${self:provider.stage}
    LOG_LEVEL: ${ssm:/pickyourcourses/${self:provider.stage}/log-level, 'info'}

  # IAM Role Statements
  iam:
    role:
      statements:
        # DynamoDB permissions
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PREFIX}-*"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PREFIX}-*/index/*"

        # CloudWatch Logs permissions
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${self:provider.region}:*:*"

        # X-Ray tracing permissions
        - Effect: Allow
          Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
          Resource: "*"

        # SSM Parameter Store permissions
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
            - ssm:GetParametersByPath
          Resource:
            - "arn:aws:ssm:${self:provider.region}:*:parameter/pickyourcourses/${self:provider.stage}/*"

        # SQS permissions for dead letter queue
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:GetQueueAttributes
          Resource:
            - "arn:aws:sqs:${self:provider.region}:*:${self:service}-${self:provider.stage}-dlq"

plugins:
  - serverless-offline

build:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    target: node22
    exclude:
      - aws-sdk

functions:
  webhook:
    handler: src/lambda.webhookHandler
    description: "Main webhook handler for Telegram bot updates"
    events:
      - http:
          path: /webhook
          method: post
          cors: false
          private: false

    # Environment-specific configuration
    environment:
      FUNCTION_NAME: webhook
      MAX_RETRY_ATTEMPTS: 3
      WEBHOOK_SECRET: ${ssm:/pickyourcourses/${self:provider.stage}/webhook-secret}

  # Health check function for monitoring
  healthCheck:
    handler: src/lambda.healthCheckHandler
    description: "Health check endpoint for monitoring"
    events:
      - http:
          path: /health
          method: get
          cors: false
    environment:
      FUNCTION_NAME: healthCheck

resources:
  Resources:
    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-users
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: telegramId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: telegramId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    CoursesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-courses
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 2
        AttributeDefinitions:
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: category
            AttributeType: S
        KeySchema:
          - AttributeName: courseId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CategoryIndex
            KeySchema:
              - AttributeName: category
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 2
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    ReviewsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-reviews
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: reviewId
            AttributeType: S
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: reviewId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CourseIndex
            KeySchema:
              - AttributeName: courseId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UserIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    VotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-votes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: voteId
            AttributeType: S
          - AttributeName: reviewId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: voteId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: ReviewIndex
            KeySchema:
              - AttributeName: reviewId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserReviewIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: reviewId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    SessionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-sessions
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
          - AttributeName: telegramId
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: TelegramIndex
            KeySchema:
              - AttributeName: telegramId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    RateLimitTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-rate-limit
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    GradingHistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-grading-history
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: historyId
            AttributeType: S
          - AttributeName: courseId
            AttributeType: S
          - AttributeName: modifiedAt
            AttributeType: S
        KeySchema:
          - AttributeName: historyId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: CourseHistoryIndex
            KeySchema:
              - AttributeName: courseId
                KeyType: HASH
              - AttributeName: modifiedAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    # SQS Dead Letter Queue
    DeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-dlq
        MessageRetentionPeriod: 1209600 # 14 days
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

    # CloudWatch Log Groups
    WebhookLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-webhook
        RetentionInDays: 30

    HealthCheckLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-healthCheck
        RetentionInDays: 7

    # CloudWatch Alarms
    HighErrorRateAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-high-error-rate
        AlarmDescription: "High error rate detected in webhook function"
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 2
        Threshold: 5
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-webhook
        TreatMissingData: notBreaching

    LongDurationAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-long-duration
        AlarmDescription: "Function duration exceeding threshold"
        MetricName: Duration
        Namespace: AWS/Lambda
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 25000 # 25 seconds
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${self:provider.stage}-webhook
        TreatMissingData: notBreaching

  Outputs:
    WebhookUrl:
      Description: "Webhook URL for Telegram bot"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}
            - "/webhook"
      Export:
        Name: ${self:service}-${self:provider.stage}-webhook-url

    HealthCheckUrl:
      Description: "Health check URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api."
            - ${self:provider.region}
            - ".amazonaws.com/"
            - ${self:provider.stage}
            - "/health"
      Export:
        Name: ${self:service}-${self:provider.stage}-health-url
